package main

import (
	"fmt"
	"os"
	"time"

	"github.com/fsouza/go-dockerclient"
	. "github.com/onsi/ginkgo"
	. "github.com/onsi/gomega"
	"github.com/robertkrimen/otto"
)

var _ = Describe("LogFormat", func() {

	var (
		benchmarkLogFormatScript = `
var message = dockerlogstream.Message;
var container_name = message.Container.Name.substring(1);

if (container_name == "skipme") {
	dockerlogstream.SkipLogLine();
} else {
	dockerlogstream.SendLogLine("<22> " + message.Time.Format("Jan 2 15:04:05") + " " +
		dockerlogstream.Hostname + " " + container_name + ": " + message.Data);
}
`
		err     error
		m       *message
		msgTime time.Time

		testLoops = 10000
	)

	BeforeSuite(func() {
		jsVM = otto.New()
		jsLineConverter, err = jsVM.Compile("", benchmarkLogFormatScript)
		Expect(err).NotTo(HaveOccurred())

		msgTime = time.Now()
		m = &message{
			Container: &docker.Container{Name: "/testcontainer"},
			Data:      "I am a random log line with a few characters like I might be generated by some random program",
			Time:      msgTime,
		}
	})

	Measure("it should handle the JavaScript call efficiently", func(b Benchmarker) {
		runtime := b.Time("runtime", func() {
			_, _, err := formatLogLine(m)
			Expect(err).NotTo(HaveOccurred())
		})

		Expect(runtime.Nanoseconds()).Should(BeNumerically("<", 25000*testLoops), "JavaScript call should not exceed Ã¸ of 25000ns")

	}, testLoops)

	Context("Testing JavaScript call results", func() {
		var (
			outputLine string
			skipLine   bool
		)

		BeforeEach(func() {
			outputLine, skipLine, err = formatLogLine(m)
		})

		It("should not have errored", func() {
			Expect(err).NotTo(HaveOccurred())
		})

		It("should have marked that line for sending", func() {
			Expect(skipLine).To(Equal(false))
		})

		It("should have generated the expected log line", func() {
			hostname, _ := os.Hostname()
			expect := fmt.Sprintf("<22> %s %s testcontainer: I am a random log line with a few characters like I might be generated by some random program",
				msgTime.Format("Jan 2 15:04:05"),
				hostname,
			)
			Expect(outputLine).To(Equal(expect))
		})
	})

	Context("Testing line skipping", func() {
		var (
			outputLine string
			skipLine   bool
		)

		BeforeEach(func() {
			m = &message{
				Container: &docker.Container{Name: "/skipme"},
				Data:      "I am a random log line with a few characters like I might be generated by some random program",
				Time:      msgTime,
			}

			outputLine, skipLine, err = formatLogLine(m)
		})

		It("should not have errored", func() {
			Expect(err).NotTo(HaveOccurred())
		})

		It("should have skipped the line", func() {
			Expect(skipLine).To(Equal(true))
		})
	})

})
